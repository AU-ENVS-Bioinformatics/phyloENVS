physeq_transect <- physeq_filtered |>
subset_samples(Transect != "Non-transect") |>
subset_samples(SampleName != "QaT1F")
p_nmds <- plot_nmds(physeq_transect,
fill = Wetness,
shape = Direction)
p_pca <- plot_pca(physeq_transect,
fill = Wetness,
shape = Direction)
p_nmds + p_pca + plot_layout(guides = "collect")
ggsave(paste(res_path, "ordination_transect_rmQaT1F.png", sep = ""),
width = 26,
height = 12,
units = "cm")
physeqGeneGlomMelt <- function(physeq, level, lower_limit){
physeq_phylum_rel_df <- physeq |>
tax_glom(taxrank = level,
NArm = FALSE) |>
transform_sample_counts(function(x) x/sum(x)*100) |>
psmelt() |>
mutate(!!level := replace_na(.data[[level]], "Unassigned"),  # Replace NA with "Unassigned"
!!level := ifelse(Abundance < lower_limit,
paste("< ", lower_limit, "%", sep = ""),
.data[[level]]),  # Handle lower limit
!!level := reorder(.data[[level]], Abundance))
return(physeq_phylum_rel_df)
}
physeq_level1_rel_df <- physeqGeneGlomMelt(physeq, "Level1", 0.5) |>
arrange(Location, Wetness, Direction, Transect) |>
mutate(SampleName = factor(SampleName, levels = unique(SampleName)))
# Number of distinct levels.
n_levels <- length(levels(physeq_level1_rel_df$Level1))
physeq_level1_rel_df |>
mutate(Wetness = case_when(Wetness == "Non-transect" ~ Location,
.default = Wetness),
Wetness = factor(Wetness, levels = c("Wet", "Semi-wet", "Dry", "QaG", "GrIS"))) |>
ggplot(aes(SampleName,
Abundance,
fill = Level1)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = "Samples",
y = "Relative abundance [%]",
fill = "Level 1") +
scale_fill_manual(values = get_wants_hue(n_levels)) +
theme(legend.position = "left") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
facet_grid(. ~ Wetness, scales = "free_x", space = "free_x")
ggsave(paste(res_path, "rel_abundance.png", sep = ""),
width = 20,
height = 12,
units = "cm")
physeq_level1_rel_df_CAZy <- physeq |>
subset_taxa(Database == "CAZy") |>
physeqGeneGlomMelt("Level1", 0.5) |>
arrange(Location, Wetness, Direction, Transect) |>
mutate(SampleName = factor(SampleName, levels = unique(SampleName)))
# Number of distinct levels.
n_levels <- length(levels(physeq_level1_rel_df_CAZy$Level1))
physeq_level1_rel_df_CAZy |>
mutate(Wetness = case_when(Wetness == "Non-transect" ~ Location,
.default = Wetness),
Wetness = factor(Wetness, levels = c("Wet", "Semi-wet", "Dry", "QaG", "GrIS"))) |>
ggplot(aes(SampleName,
Abundance,
fill = Level1)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = "Samples",
y = "Relative abundance [%]",
fill = "Level 1") +
scale_fill_manual(values = get_wants_hue(n_levels)) +
theme(legend.position = "left") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
facet_grid(. ~ Wetness, scales = "free_x", space = "free_x")
ggsave(paste(res_path, "rel_abundance_CAZy.png", sep = ""),
width = 20,
height = 12,
units = "cm")
physeq_level1_rel_df_NCyc <- physeq |>
subset_taxa(Database == "NCyc") |>
physeqGeneGlomMelt("Level1", 0.5) |>
arrange(Location, Wetness, Direction, Transect) |>
mutate(SampleName = factor(SampleName, levels = unique(SampleName)))
# Number of distinct levels.
n_levels <- length(levels(physeq_level1_rel_df_NCyc$Level1))
physeq_level1_rel_df_NCyc |>
mutate(Wetness = case_when(Wetness == "Non-transect" ~ Location,
.default = Wetness),
Wetness = factor(Wetness, levels = c("Wet", "Semi-wet", "Dry", "QaG", "GrIS"))) |>
ggplot(aes(SampleName,
Abundance,
fill = Level1)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = "Samples",
y = "Relative abundance [%]",
fill = "Level 1") +
scale_fill_manual(values = get_wants_hue(n_levels)) +
theme(legend.position = "left") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
facet_grid(. ~ Wetness, scales = "free_x", space = "free_x")
ggsave(paste(res_path, "rel_abundance_NCyc.png", sep = ""),
width = 20,
height = 12,
units = "cm")
physeq_level1_rel_df_PCyc <- physeq |>
subset_taxa(Database == "PCyc") |>
physeqGeneGlomMelt("Level1", 0.5) |>
arrange(Location, Wetness, Direction, Transect) |>
mutate(SampleName = factor(SampleName, levels = unique(SampleName)))
# Number of distinct levels.
n_levels <- length(levels(physeq_level1_rel_df_PCyc$Level1))
physeq_level1_rel_df_PCyc |>
mutate(Wetness = case_when(Wetness == "Non-transect" ~ Location,
.default = Wetness),
Wetness = factor(Wetness, levels = c("Wet", "Semi-wet", "Dry", "QaG", "GrIS"))) |>
ggplot(aes(SampleName,
Abundance,
fill = Level1)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = "Samples",
y = "Relative abundance [%]",
fill = "Level 1") +
scale_fill_manual(values = get_wants_hue(n_levels)) +
theme(legend.position = "left") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
facet_grid(. ~ Wetness, scales = "free_x", space = "free_x")
ggsave(paste(res_path, "rel_abundance_PCyc.png", sep = ""),
width = 20,
height = 12,
units = "cm")
physeq_level1_rel_df_new <- physeq_level1_rel_df |>
filter(Transect != "Non-transect")
# Number of distinct levels.
n_levels <- length(levels(physeq_level1_rel_df_new$Level1))
physeq_level1_rel_df_new |>
ggplot(aes(SampleName,
Abundance,
fill = Level1)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = "Samples",
y = "Relative abundance [%]",
fill = "Level 1") +
scale_fill_manual(values = get_wants_hue(n_levels)) +
theme(legend.position = "left") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("") +
facet_grid(. ~ Direction, scales = "free_x", space = "free_x")
ggsave(paste(res_path, "rel_abundance_direction.png", sep = ""),
width = 20,
height = 12,
units = "cm")
plot_richness(physeq,
x = "Location",
color =  "Location",
shape = "Transect",
measures=c("Shannon","Simpson","InvSimpson")) +
theme_bw() +
scale_fill_manual(values=c("#73B8EF",
"#D38032",
"#33822D",
"#676A6A"),
aesthetics = c("colour",
"fill")) +
geom_point(size = 2)
physeq |>
subset_samples(Transect != "Non-transect") |>
plot_richness(x = "Wetness",
color =  "Wetness",
measures=c("Shannon","Simpson","InvSimpson")) +
theme_bw() +
scale_fill_manual(values=c("#73B8EF",
"#D38032",
"#33822D",
"#676A6A"),
aesthetics = c("colour",
"fill")) +
geom_point(size = 2)
physeq |>
subset_samples(Transect != "Non-transect") |>
plot_richness(x = "Direction",
color =  "Direction",
measures=c("Shannon","Simpson","InvSimpson")) +
theme_bw() +
scale_fill_manual(values=c("#73B8EF",
"#D38032",
"#33822D",
"#676A6A"),
aesthetics = c("colour",
"fill")) +
geom_point(size = 2)
library(RauENVS)
library(dplyr)
library(tidyverse)
library(phyloseq)
library(microbiome)
library(cowplot)
library(vegan)
library(magrittr)
library(forcats)
library(viridis)
library(colorspace)
set_theme_AU_ENVS()
knitr::opts_chunk$set(echo = TRUE)
#| include: false
# Remove all objects from the current workspace
rm(list=ls())
# Libraries
library(readr)
library(dplyr)
library(tidyverse)
library(phyloseq)
library(ggplot2)
library(ggrepel)
library(ggdendro)
library(patchwork)
library(table1)
library(igraph)
library(compositions)
library(propr)
library(coda.base)
# Get functions from additional file
source("func.R")
# Result path
res_path <- "../results/mRNA/"
all_files_path <- list.files(path = "../data/initial_data",
pattern = "annotated\\.tsv$",
full.names = T)
all_files_read <- lapply(all_files_path, function(x) {
read_tsv(file = x,
show_col_types = FALSE)
}
)
new_sample_names <- readRDS("../data/additional/new_sample_names.rds") |>
rename(colnames = rowname)
first <- TRUE
for (i in 1:length(all_files_read)){
if (str_detect(string = all_files_path[[i]], pattern = "AnnoTree")){
next
}
else{
otu_single <- all_files_read[[i]] |>
select(new_sample_names$colnames)
}
if (first == FALSE){
otu <- full_join(otu, otu_single,
by = new_sample_names$colnames,
relationship = "many-to-many")
}
if (first == TRUE){
otu <-  otu_single
first <- FALSE
}
}
first <- TRUE
pcyc_table <- readRDS("../data/additional/pcyc_table.rds") |>
distinct(Gene, .keep_all = TRUE)
for (i in 1:length(all_files_read)){
if (str_detect(string = all_files_path[[i]], pattern = "AnnoTree")){
next
}
else {
tax_single <- all_files_read[[i]] |>
select(!new_sample_names$colnames) |>
mutate(Database = str_extract(all_files_path[[i]], pattern = "(\\w+)_matches",
group = 1))
}
if (str_detect(string = all_files_path[[i]], pattern = "CAZy")){
tax_single <- tax_single |>
rename(Gene = CAZyDB_id)
}
if (str_detect(string = all_files_path[[i]], pattern = "NCyc")){
tax_single <- tax_single |>
rename(Gene = Level2)
}
if (str_detect(string = all_files_path[[i]], pattern = "PCycDB")){
tax_single <- tax_single |>
rename(Gene = gene)
tax_single <- left_join(tax_single, pcyc_table, by = "Gene")
}
if (first == FALSE){
tax <- full_join(tax, tax_single)
}
if (first == TRUE){
tax <- tax_single
first <- FALSE
}
}
tax <- tax |>
mutate(Database = str_remove(Database, "DB"),
Contig = as.numeric(row_number(Database))) |>
relocate(Contig, Database, Level1, Level2, Gene)
meta <- read_csv("../data/clean_data/meta.csv", show_col_types = FALSE)
meta <- meta |>
column_to_rownames(var = "Sample") |>
mutate(Wetness = factor(Wetness, levels = c("Wet", "Semi-wet", "Dry", "Non-transect"))) |>
sample_data()
otu  <- otu |>
otu_table(taxa_are_rows = TRUE)
tax <- tax |>
as.matrix() |>
tax_table()
library(RauENVS)
library(dplyr)
library(tidyverse)
library(phyloseq)
library(microbiome)
library(cowplot)
library(vegan)
library(magrittr)
library(forcats)
library(viridis)
library(colorspace)
set_theme_AU_ENVS()
knitr::opts_chunk$set(echo = TRUE)
View(meta)
View(meta)
facet_col <- "Wetness"
xaxis_col <- "Direction"
get_wants_hue_tol_muted <- function(n) {
rev(diverging_hcl(n, palette = "Berlin"))
}
# If you want other palettes, see here: https://colorspace.r-forge.r-project.org/articles/hcl_palettes.html#sequential-palettes-multi-hue
# Good ones include: "Berlin", "Green-Brown", "Cork", "Broc", "Vik"
# One can also go with sequential instead of diverging hues.
# We will also make a BRITE lvl1 cat1
get_wants_hue_tol_muted_cat1 <- function(n) {
rev(diverging_hcl(n, palette = "Blue-Red 2"))
}
# And a function for the BRITE lvl1 cat2
get_wants_hue_tol_muted_cat2 <- function(n) {
(diverging_hcl(n, palette = "Purple-Green"))
}
# And a function for the BRITE lvl1 cat3
get_wants_hue_tol_muted_cat3 <- function(n) {
rev(diverging_hcl(n, palette = "Tofino"))
}
res_path <- file.path(getwd(), "figures")
# Create the "figures" directory if it doesn't already exist
if (!dir.exists(res_path)) {
dir.create(res_path)
}
# Now you can use res_path to save your figures
getwd()
stopifnot(ncol(otu_tbl) == nrow(metadata_tbl))
(physeq <- phyloseq(otu, taxa, meta))
physeq_rel <- physeq |>
transform_sample_counts(function(x) x/sum(x)*100)
physeq_mean_rel <-  physeq_rel |>
merge_samples(facet_col) |>
transform_sample_counts(function(x) x/sum(x)*100)
sample_sums(physeq_mean_rel)
#| label: tbl-otu
#| tbl-cap: "OTU table"
physeq_rel |>
otu_table()|>
as.data.frame()
#| label: tbl-taxa
#| tbl-cap: "Taxonomic table"
physeq_rel |>
tax_table()|>
as.data.frame()
#| label: tbl-taxa
#| tbl-cap: "Taxonomic table"
physeq_rel |>
tax_table()|>
as.data.frame()
physeq_rel
(physeq <- phyloseq(otu, tax, meta))
physeq_rel <- physeq |>
transform_sample_counts(function(x) x/sum(x)*100)
physeq_mean_rel <-  physeq_rel |>
merge_samples(facet_col) |>
transform_sample_counts(function(x) x/sum(x)*100)
sample_sums(physeq_mean_rel)
#| label: tbl-otu
#| tbl-cap: "OTU table"
physeq_rel |>
otu_table()|>
as.data.frame()
#| label: tbl-taxa
#| tbl-cap: "Taxonomic table"
physeq_rel |>
tax_table()|>
as.data.frame()
#|label: sample_sums
sample_sums(physeq)
sample_names(physeq)
rank_names(physeq)
sample_variables(physeq)
#| label: ordination
(physeq_nmds <- ordinate(physeq, method = "NMDS", distance = "bray"))
#| label: fig-stressplot
#| fig-cap: A plot of ordination distances and monotone or linear fit line against original dissimilarities.
vegan::stressplot(physeq_nmds)
# Save the plot as a PNG file with proper resolution and size
png(filename = file.path(res_path, "Annotree_Stressplot.png"), width = 8, height = 6, units = "in", res = 300)
vegan::stressplot(physeq_nmds)
dev.off()
res_path
#| label: ordination
(physeq_nmds <- ordinate(physeq, method = "NMDS", distance = "bray"))
#| label: fig-stressplot
#| fig-cap: A plot of ordination distances and monotone or linear fit line against original dissimilarities.
vegan::stressplot(physeq_nmds)
# Save the plot as a PNG file with proper resolution and size
png(filename = file.path(res_path, "Annotree_Stressplot.png"), width = 8, height = 6, units = "in", res = 300)
vegan::stressplot(physeq_nmds)
dev.off()
#| label: fig-NMDS
#| message: false
plot_nmds <- function(x, ...){
y <- ordinate(x, method = "NMDS", distance = "bray")
plot_ordination(x, y, ...) +
geom_point(size = 4, aes_string(shape = facet_col, color = xaxis_col)) +  # Increase point size
scale_color_viridis(option = "D", discrete = TRUE) +  # Use viridis color palette https://ggplot2.tidyverse.org/reference/scale_viridis.html
#"magma" (or "A") - "inferno" (or "B") - "plasma" (or "C") - "viridis" (or "D") - "cividis" (or "E") - "rocket" (or "F") - "mako" (or "G") - "turbo" (or "H")
scale_shape_manual(values = c(15, 16, 17, 18, 14, 8, 7, 6, 12)) +  # Customize shapes https://ggplot2-book.org/scales-other#sec-scale-shape
theme(
legend.title = element_blank(),
legend.position = "right",
text = element_text(size = 12),  # Increase text size for better readability
axis.title = element_text(size = 14),  # Increase axis title size
axis.text = element_text(size = 12),  # Increase axis text size
panel.background = element_rect(fill = "#F7F7F7", color = NA),  # Set panel background to light grey
plot.background = element_rect(fill = "white", color = NA)  # Set plot background to white
) #+
#stat_ellipse()
}
# Generate the NMDS plot
nmds <- list(all = plot_nmds(physeq_rel, type = "SAMPLE", color = xaxis_col, shape = facet_col))
# Plot the NMDS figure
print (nmds$all)
# Save the plot as a PNG file with proper resolution and size
ggsave(filename = file.path(res_path, "Annotree_NMDS_plot.png"),
plot = nmds$all,
width = 8, height = 6, units = "in", dpi = 300)
###----Richness all----
# Create the richness plot
richness_plot <- plot_richness(
physeq, x = facet_col, color = xaxis_col,
measures = c("Shannon", "InvSimpson")
)
# Customize the plot
richness_plot <- richness_plot +
geom_boxplot(
data = richness_plot$data, aes(color = NULL, fill = "lightgrey"), alpha = 0.5
)+
geom_point(size = 2) +  # Increase point size
scale_fill_manual(values = "lightgrey", guide = "none") +  # Set boxplot fill color to light grey
scale_color_viridis(option = "D", discrete = TRUE) +  # Use viridis color palette for points
theme(
legend.title = element_blank(),
legend.position = "right",
axis.text.x = element_text(angle = 0, hjust = 1),
panel.background = element_rect(fill = "white", color = NA),  # Set panel background to white
plot.background = element_rect(fill = "white", color = NA)  # Set plot background to white
) +
theme_bw()
# Display the plot
print(richness_plot)
ggsave(filename = file.path(res_path, "Annotree_Richness_all.png"),
plot = richness_plot,
width = 8, height = 6, units = "in", dpi = 300)
(otu_microbiome <- microbiome::abundances(physeq))
(meta_microbiome <- microbiome::meta(physeq))
otu <- microbiome::abundances(physeq)
meta <- microbiome::meta(physeq)
# Run the PERMANOVA analysis
permanova_Timepoint <- adonis2(
t(otu)~Timepoint,
data = meta,
permutations=999, method = "bray"
)
# Run the PERMANOVA analysis
permanova_Concentration <- adonis2(
t(otu)~Concentration,
data = meta,
permutations=999, method = "bray"
)
# Run the PERMANOVA analysis
permanova_Conc_time <- adonis2(
t(otu)~Conc_time,
data = meta,
permutations=999, method = "bray"
)
physeq_Brite_Level1_rel <- physeq_rel |>
tax_glom(taxrank = "Brite_Level1") |>
transform_sample_counts(function(x) x/sum(x)*100)
devtools::document()
setwd("~/Library/CloudStorage/OneDrive-Aarhusuniversitet/AU ENVS/qaanaaq_project/code")
install.packages("roxygen2")
install.packages("roxygen2")
setwd("~/Library/CloudStorage/OneDrive-Aarhusuniversitet/AU ENVS/phyloENVS")
install.packages(usetools)
install.packages("usethis")
install.packages("devtools")
usethis::use_mit_license()
devtools::document()
devtools::document()
devtools::load_all()
?data_to_phyloseq
data_to_phyloseq(2)
data_to_phyloseq(4)
devtools::check()
